pipeline {
    agent any
    environment {
        NAMESPACE = 'group1-team6'
        JAVA_HOME = "/usr/local/java21"
        PATH = "${JAVA_HOME}/bin:${env.PATH}"

        COMMON_HELM_CHART_PATH="eazybank-common"
        GLOBAL_HELM_CHART_PATH="environments/prod-env"
        
        HELM_CHART_PATH="environments/prod-env"
        HELM_RELEASE_NAME="team6-cha-first-helm"
        
    }
    stages {
        stage('Checkout') {
            steps {
                // Git 저장소에서 소스 코드 체크아웃 (branch 지정 : 본인 repository의 branch 이름으로 설정)
                git branch: 'main', url: 'https://github.com/chayeonhee/helmchart.git'
            }
        }
        
         stage('Helm Dependency Update') {
            steps {
                //Chart.yaml이 있는 디렉토리에서 실행
                script {
                    ['eurekaserver','configserver','accounts','loans','cards','gatewayserver'].each { service ->
                            sh "helm dependency update ./eazybank-services/${service}/helm-chart"
                            sh "helm dependency build ./eazybank-services/${service}/helm-chart"
                    }
                }

                sh "helm dependency update ./${GLOBAL_HELM_CHART_PATH}"
                sh "helm dependency build ./${GLOBAL_HELM_CHART_PATH}"

                // yaml 파일 렌더링
                sh "helm template ${HELM_RELEASE_NAME} ${HELM_CHART_PATH} \
                  -f ./${GLOBAL_HELM_CHART_PATH}/values.yaml \
                  -f ./${COMMON_HELM_CHART_PATH}/values.yaml \
                 --namespace ${NAMESPACE} --debug "
            }
        }
        stage(' Eureka HELM Deploy') {
            steps {
                script {
                        // sh "kubectl get pods -n ${NAMESPACE} | grep 'wait-for' | awk '{print \$1}' | xargs kubectl delete pod -n ${NAMESPACE} "
                        sh "helm upgrade --install ${HELM_RELEASE_NAME} ${HELM_CHART_PATH} \
                        --namespace ${NAMESPACE} \
                        -f ./${GLOBAL_HELM_CHART_PATH}/values.yaml \
                        -f ./${COMMON_HELM_CHART_PATH}/values.yaml \
                        --reset-values \
                        --set eurekaserver.enabled=true \
                        --set configserver.enabled=false \
                        --set accounts.enabled=false \
                        --wait --timeout 10m0s --force"
                        sh "kubectl get pods --namespace ${NAMESPACE}"
                }
            }
        }
          stage(' config HELM Deploy') {
            steps {
                script {
                        sh "helm upgrade --install ${HELM_RELEASE_NAME} ${HELM_CHART_PATH} \
                        --namespace ${NAMESPACE} \
                        -f ./${GLOBAL_HELM_CHART_PATH}/values.yaml \
                        -f ./${COMMON_HELM_CHART_PATH}/values.yaml \
                        --reset-values \
                        --set eurekaserver.enabled=true \
                        --set configserver.enabled=true \
                        --wait --timeout 10m0s --force"
                        sh "kubectl get pods --namespace ${NAMESPACE}"
                }
            }
        }
        stage(' Service HELM Deploy ') {
            steps {
                script {
                        // sh "kubectl get pods -n ${NAMESPACE} | grep 'wait-for' | awk '{print \$1}' | xargs kubectl delete pod -n ${NAMESPACE} "
                        sh "helm upgrade --install ${HELM_RELEASE_NAME} ${HELM_CHART_PATH} \
                        --namespace ${NAMESPACE} \
                        -f ./${GLOBAL_HELM_CHART_PATH}/values.yaml \
                        -f ./${COMMON_HELM_CHART_PATH}/values.yaml \
                        --set eurekaserver.enabled=true \
                        --set configserver.enabled=true \
                        --set accounts.enabled=true \
                        --reset-values \
                        --wait --timeout 10m0s --force"

                        sh "kubectl get pods --namespace ${NAMESPACE}"
                }
            }
        }
    }
}
